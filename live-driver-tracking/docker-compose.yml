---
version: '2'

services:

  broker:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:9092,CONTROLLER://broker:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      CLUSTER_ID: 'QTnB2tAgTWa1ec5wYon2jg'

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:9092'

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${KSQL_VERSION}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - schema-registry
    volumes:
      - ./extensions:/etc/ksqldb/ext
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "broker:9092"
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_KSQL_EXTENSION_DIR: "/etc/ksqldb/ext/"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      #SQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: "earliest"
      KSQL_KSQL_STREAMS_CACHE_MAX_BYTES_BUFFERING: "20000000"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:${KSQL_VERSION}
    container_name: ksqldb-cli
    environment:
      # workaround for WARNINIG errors on console in docker: sun.rmi.transport.tcp.TCPTransport$AcceptLoop run WARNING: RMI TCP Accept-0: accept loop for ServerSocket [...]
      KSQL_LOG4J_OPTS: "-Djava.util.logging.config.file=/home/appuser/logging.properties"
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    volumes:       
      # workaround for WARNING on log
      - ./logging.properties:/home/appuser/logging.properties

  control-center:
      image: confluentinc/cp-enterprise-control-center:${CONFLUENT_VERSION}
      hostname: control-center
      container_name: control-center
      depends_on:
        - broker
        - schema-registry
        - ksqldb-server
      ports:
        - "9021:9021"
      environment:
        CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
        #CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'http://connect:8083'
        #CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
        CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
        CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
        CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
        CONTROL_CENTER_REPLICATION_FACTOR: 1
        CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
        CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
        CONFLUENT_METRICS_TOPIC_REPLICATION: 1
        PORT: 9021

  create-topics:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    container_name: create-topics
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:9092 1 300 && \
                       echo Creating topics... && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-positions --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-positions-pyavro --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-profiles-avro --partitions 3 --replication-factor 1 --config cleanup.policy=compact && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-profiles-ksqlavro --partitions 3 --replication-factor 1 --config cleanup.policy=compact && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-positions-avro --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-distance-avro --partitions 3 --replication-factor 1 && \
                       kafka-topics --bootstrap-server broker:9092 --create --topic driver-augmented-avro --partitions 3 --replication-factor 1'"        
  live-tracking-ui:
    image: node-confluent-librdkafka:latest
    container_name: live-tracking-ui
    hostname: live-tracking-ui
    ports:
      - 3001:3000
    command: "bash -c 'until kcat -b broker:9092 -L | grep driver-positions; \
                      do sleep 1; \
                      echo waiting for topic; \
                      done; \
                      npm run start'"

###############################
# Datagen  JR container       #
############################### 

  jr-cli:
      image: ugol/jr
      container_name: jr-cli
      entrypoint: /bin/sh
      tty: true
      volumes:
          - ./templates/event_template.tpl:/home/jr/.jr/templates/event_template.tpl
          - ./templates/insert_orders.tpl:/home/jr/.jr/templates/insert_orders.tpl